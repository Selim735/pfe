generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                          BigInt    @id @default(autoincrement())
  email                       String    @unique
  passwordHash                String
  firstName                   String
  lastName                    String
  phone                       String?
  avatarUrl                   String?
  role                        Role      @default(USER)
  emailVerified               Boolean   @default(false)
  verificationToken           String?
  verificationTokenExpiresAt  DateTime?
  resetPasswordToken          String?
  resetPasswordTokenExpiresAt DateTime?
  createdAt                   DateTime  @default(now())
  updatedAt                   DateTime  @updatedAt
  lastLoginAt                 DateTime?
  isActive                    Boolean   @default(true)

  providerProfile ProviderProfile?
  Appointment     Appointment[]

  @@map("users")
}

model ProviderProfile {
  id                      BigInt   @id @default(autoincrement())
  userId                  BigInt   @unique
  businessName            String
  businessDescription     String?
  businessLogoUrl         String?
  businessLicenseNumber   String?
  businessLicenseVerified Boolean  @default(false)
  businessAddress         String?
  businessLatitude        Decimal? @db.Decimal(10, 8)
  businessLongitude       Decimal? @db.Decimal(11, 8)
  businessPhone           String?
  businessEmail           String?
  businessWebsite         String?
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt

  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  Service     Service[]
  Appointment Appointment[]

  @@map("provider_profiles")
}

enum Role {
  USER
  PROVIDER
  ADMIN
}

model Category {
  id          BigInt    @id @default(autoincrement())
  name        String
  description String?
  iconUrl     String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  Service     Service[]

  @@map("categories")
}

model Service {
  id          BigInt   @id @default(autoincrement())
  providerId  BigInt? // Make this optional
  categoryId  BigInt
  title       String
  description String
  price       Decimal?
  priceUnit   String?
  duration    Int?
  isAvailable Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  provider     ProviderProfile? @relation(fields: [providerId], references: [id], onDelete: Cascade) // Ensure provider relation is optional
  category     Category         @relation(fields: [categoryId], references: [id])
  ServiceImage ServiceImage[]
  Appointment  Appointment[]
}

model ServiceImage {
  id        BigInt   @id @default(autoincrement())
  serviceId BigInt
  imageUrl  String
  isPrimary Boolean  @default(false)
  createdAt DateTime @default(now())

  service Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@map("service_images")
}

model Appointment {
  id              BigInt            @id @default(autoincrement())
  userId          BigInt
  serviceId       BigInt
  providerId      BigInt
  appointmentDate DateTime          
  startTime       DateTime
  endTime         DateTime
  status          AppointmentStatus @default(pending)
  notes           String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  service         Service         @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  providerProfile ProviderProfile @relation(fields: [providerId], references: [id], onDelete: Cascade)
}

enum AppointmentStatus {
  pending
  confirmed
  completed
  cancelled
  rejected
}
